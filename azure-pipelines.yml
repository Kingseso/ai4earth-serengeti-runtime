# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pr:
  autoCancel: true
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

jobs:
- job: publish_runtime_container
  condition: eq(variables['build.sourceBranch'], 'refs/heads/master')
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    dockerId: ai4edrivendata
    imageName: inference
  timeoutInMinutes: 360
  cancelTimeoutInMinutes: 90
  steps:
  - script: |
      cd runtime
      docker build -t $(dockerId).azurecr.io/$(imageName):$GIT_COMMIT .
      docker login -u $(dockerId) -p $(dockerPassword) $(dockerId).azurecr.io
      docker push $(dockerId).azurecr.io/$(imageName):$GIT_COMMIT
    env:
      pswd: $(dockerPassword)
      GIT_COMMIT: $(Build.SourceVersion)
- job: test_gpu_installs
  condition: ne(variables['build.sourceBranch'], 'refs/heads/master')
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    dockerId: ai4edrivendata
    imageName: inference
  timeoutInMinutes: 360
  cancelTimeoutInMinutes: 90
  steps:
  - script: |
      cd runtime
      docker build --build-arg CPU_GPU=gpu -t $(dockerId)/$(imageName) .
      docker run $(dockerId)/$(imageName) /bin/bash -c "bash run-tests.sh"
    env:
      pswd: $(dockerPassword)
      GIT_COMMIT: $(Build.SourceVersion)
- job: test_cpu_installs
  condition: ne(variables['build.sourceBranch'], 'refs/heads/master')
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    dockerId: ai4edrivendata
    imageName: inference
  timeoutInMinutes: 360
  cancelTimeoutInMinutes: 90
  steps:
  - script: |
      cd runtime
      docker build --build-arg CPU_GPU=cpu -t $(dockerId)/$(imageName) .
      docker run $(dockerId)/$(imageName) /bin/bash -c "bash run-tests.sh"
